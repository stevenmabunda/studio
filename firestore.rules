
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthor(docData) {
      return request.auth.uid == docData.authorId;
    }

    function isInteractionUpdate(requestData, resourceData) {
      return requestData.content == resourceData.content &&
             requestData.authorId == resourceData.authorId &&
             // Allow interaction counters to change
             requestData.likes != resourceData.likes ||
             requestData.comments != resourceData.comments ||
             requestData.reposts != resourceData.reposts ||
             // Allow poll vote updates
             (requestData.poll != null && resourceData.poll != null && requestData.poll.choices != resourceData.poll.choices);
    }
    
    function isContentUpdate(requestData, resourceData) {
        return requestData.content != resourceData.content;
    }

    match /posts/{postId} {
      allow read;
      allow create: if request.auth.uid == request.resource.data.authorId;
      // Allow authors to update content.
      // Allow any authenticated user to update interaction fields (likes, etc.)
      allow update: if (isAuthor(resource.data) && isContentUpdate(request.resource.data, resource.data)) ||
                       (request.auth.uid != null && isInteractionUpdate(request.resource.data, resource.data));
      allow delete: if isAuthor(resource.data);

      match /comments/{commentId} {
          allow read;
          allow create: if request.auth.uid != null;
      }
    }

    match /users/{userId} {
      allow read;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;

      // Notifications subcollection rules
      match /notifications/{notificationId} {
        // Any authenticated user can create a notification for another user
        allow create: if request.auth.uid != null;
        // Only the user themselves can read or update (e.g., mark as read) their notifications
        allow read, update, delete: if request.auth.uid == userId;
      }
    }

    match /topics/{topicId} {
        allow read;
        allow create: if request.auth.uid != null;
    }
  }
}
