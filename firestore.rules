
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    function isAuthor(doc) {
      return request.auth.uid == doc.data.authorId;
    }
    
    function isStoryAuthor(doc) {
      return request.auth.uid == doc.data.userId;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    // When a non-author updates a post, this function ensures they are ONLY
    // changing interaction fields (e.g., likes, comments) and not protected fields.
    function isInteractionUpdate() {
      let protectedFieldsUnchanged = 
          request.resource.data.content == resource.data.content &&
          request.resource.data.authorId == resource.data.authorId &&
          request.resource.data.authorName == resource.data.authorName &&
          request.resource.data.authorHandle == resource.data.authorHandle &&
          request.resource.data.authorAvatar == resource.data.authorAvatar &&
          request.resource.data.createdAt == resource.data.createdAt &&
          request.resource.data.media == resource.data.media;

      return protectedFieldsUnchanged;
    }

    // =================================
    // Collection Rules
    // =================================

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }
    
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isAuthor(request.resource);
      
      // An update is allowed if:
      // 1. You are the author (and can change anything).
      // 2. You are not the author, but you are only changing interaction fields.
      allow update: if isAuthenticated() && (isAuthor(resource) || isInteractionUpdate());

      allow delete: if isAuthenticated() && isAuthor(resource);

      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && isAuthor(request.resource);
        allow update, delete: if isAuthenticated() && isAuthor(resource);
      }
    }
    
    match /stories/{storyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isStoryAuthor(request.resource);
      allow update: if false; // Stories are immutable
      allow delete: if isAuthenticated() && isStoryAuthor(resource);
    }

    match /topics/{topicId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
  }
}
