rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions to improve readability
    function isAuthor(postId) {
      return get(/databases/$(database)/documents/posts/$(postId)).data.authorId == request.auth.uid;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function canInteract(postData) {
      let nonInteractiveFields = ['authorId', 'authorName', 'authorHandle', 'authorAvatar', 'content', 'createdAt', 'media'];
      return request.resource.data.diff(postData).affectedKeys().hasOnly(nonInteractiveFields) == false;
    }

    // Rules for posts
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      
      // Separate update rules for clarity
      allow update: if request.auth != null && isAuthor(postId) && !canInteract(resource.data); // Author can edit content
      allow update: if request.auth != null && !isAuthor(postId) && canInteract(resource.data); // Others can interact (like, comment, vote)

      allow delete: if request.auth != null && isAuthor(postId);

      // Rules for comments subcollection
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        // Comments are immutable
        allow update, delete: if false;
      }
    }
    
    // Rules for user profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);

      // Rules for user notifications
      match /notifications/{notificationId} {
        allow read: if isOwner(userId);
        allow create: if request.auth != null; // Allow server-side creation
        allow update, delete: if isOwner(userId);
      }
      
      // Rules for user bookmarks
      match /bookmarks/{postId} {
        allow read, create, delete: if isOwner(userId);
      }
    }
    
    // Rules for topics
    match /topics/{topicId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null; // Let any authenticated user create topics
    }
  }
}
