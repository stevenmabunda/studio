
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read their own data and other users' public profiles.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // Allow authenticated users to read and create topics.
    match /topics/{topicId} {
      allow read, create: if request.auth != null;
    }

    // Allow authenticated users to read and create stories.
    match /stories/{storyId} {
        allow read, create: if request.auth != null;
        allow update, delete: if request.auth.uid == resource.data.userId;
    }
    
    // Comments are a subcollection of posts
    match /posts/{postId}/comments/{commentId} {
        // Any authenticated user can read comments
        allow read: if request.auth != null;
        // A user can create a comment if they are the author of that comment
        allow create: if request.auth.uid == request.resource.data.authorId;
        // Only the author can delete their own comment.
        allow delete: if request.auth.uid == resource.data.authorId;
        // Comments cannot be updated
        allow update: if false;
    }

    match /posts/{postId} {
      // Anyone logged in can read a post.
      allow read: if request.auth != null;

      // Anyone logged in can create a post, as long as they are the author.
      allow create: if request.auth.uid == request.resource.data.authorId;

      // --- Complex Update Rule ---
      // Allow updates under specific conditions to handle likes, comments, etc.
      allow update: if
          // 1. The user must be authenticated.
          request.auth != null &&
          (
            // 2. Condition for AUTHOR editing their own content.
            // The user is the author AND they are only changing the 'content' field.
            (request.auth.uid == resource.data.authorId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['content'])) ||

            // 3. Condition for ANY authenticated user to interact (like, comment, repost, vote).
            // They can only change the counts or poll data.
            (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'reposts', 'comments', 'poll']))
          );
          
      // Only the author of the post can delete it.
      allow delete: if request.auth.uid == resource.data.authorId;
    }
  }
}
