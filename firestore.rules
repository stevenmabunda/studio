
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Stories: Can read recent stories, can only create/delete their own.
    match /stories/{storyId} {
      allow read: if request.auth != null && resource.data.createdAt > request.time - duration.value(24, 'h');
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Topics: Authenticated users can create topics (by posting). Reading is open.
    match /topics/{topicId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
    }

    // Posts: Complex rules for posts and their subcollections
    match /posts/{postId} {
      // Anyone logged in can read a post.
      allow read: if request.auth != null;
      
      // Anyone logged in can create a post, as long as they are the author.
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;

      // Update rules:
      // The author can edit the post content.
      // Any user can update likes, reposts, comments count, or poll votes.
      allow update: if request.auth != null && (
          ( // Rule for author editing their own content
            resource.data.authorId == request.auth.uid &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['content'])
          ) || ( // Rule for any user updating interaction counts
            request.resource.data.diff(resource.data).affectedKeys()
              .hasAny(['likes', 'reposts', 'comments', 'poll.choices']) &&
            request.resource.data.diff(resource.data).affectedKeys()
              .hasOnly(['likes', 'reposts', 'comments', 'poll'])
          )
      );
      
      // The author can delete their own post.
      allow delete: if request.auth != null && resource.data.authorId == request.auth.uid;

      // Comments subcollection
      match /comments/{commentId} {
        allow read: if request.auth != null;
        // A user can create a comment if they are logged in and the authorId matches their UID.
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      }
    }
  }
}
