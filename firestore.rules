
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if true;
      // User can create their own doc, and update/delete it.
      allow write: if isSignedIn() && isOwner(userId);
    }

    match /posts/{postId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);
      
      // Update Rule:
      // An update is allowed if...
      allow update: if isSignedIn() && (
        // EITHER the user is the author (they can change their own post's content)
        isOwner(resource.data.authorId)
        ||
        // OR the user is NOT the author, but they are only interacting (e.g. liking, commenting).
        // In this case, the core content fields must not be changed.
        (
          !isOwner(resource.data.authorId) &&
          request.resource.data.content == resource.data.content &&
          request.resource.data.authorId == resource.data.authorId &&
          request.resource.data.createdAt == resource.data.createdAt &&
          request.resource.data.media == resource.data.media
        )
      );
    }

    match /posts/{postId}/comments/{commentId} {
      allow read: if true;
      allow create: if isSignedIn();
      // To keep it simple, nobody can update/delete comments for now.
      allow update, delete: if false;
    }

    // This rule covers subcollections like 'bookmarks' and 'notifications' within a user's document.
    match /users/{userId}/{subcollection}/{docId} {
       allow read, write: if isSignedIn() && isOwner(userId);
    }

    match /topics/{topicId} {
      allow read: if true;
      allow create: if isSignedIn();
      // No updates or deletes on topics for now.
      allow update, delete: if false;
    }
  }
}
