rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users: Can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // Stories: Can be created by any authenticated user. Can be read by any authenticated user.
    match /stories/{storyId} {
      allow read, create: if isAuthenticated();
      allow update, delete: if isOwner(resource.data.userId);
    }

    // Topics: Can be created by any authenticated user. Can be read by any authenticated user.
    match /topics/{topicId} {
      allow read, create: if isAuthenticated();
      // No one can update or delete topics directly for simplicity. They expire naturally.
      allow update, delete: if false;
    }

    // Posts: Can be read by anyone authenticated.
    // Can be created by authenticated users.
    // Can only be updated/deleted by the owner.
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
      
      // An owner can update anything.
      // Any authenticated user can update ONLY the interaction counts.
      allow update: if isAuthenticated() and (
        isOwner(resource.data.authorId) or
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'reposts', 'comments'])
      );
      
      allow delete: if isAuthenticated() && isOwner(resource.data.authorId);

      // Comments: Can be read/listed by authenticated users.
      // Can be created by authenticated users.
      // Can only be updated/deleted by the comment author.
      match /comments/{commentId} {
        allow read, list: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && isOwner(request.resource.data.authorId);
      }
    }
  }
}
