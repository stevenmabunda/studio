
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function canInteractWithPost() {
      // This function ensures that a non-author can only update interaction fields.
      // It works by checking that none of the post's core, protected fields are being changed.
      let protectedFields = ['content', 'media', 'authorId', 'createdAt', 'authorName', 'authorHandle', 'authorAvatar'];
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return !changedKeys.hasAny(protectedFields);
    }

    // --- Collection Rules ---
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Prevent user document deletion
    }

    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
      // An update is allowed if you are the author OR if you are just interacting (e.g., liking, commenting).
      allow update: if isOwner(resource.data.authorId) || (isAuthenticated() && canInteractWithPost());
      allow delete: if isOwner(resource.data.authorId);

      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
        allow update: if isOwner(resource.data.authorId);
        allow delete: if isOwner(resource.data.authorId);
      }
    }

    match /topics/{topicId} {
      allow read: if isAuthenticated();
      // Topics are created when a post is made. No modifications allowed.
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }

    match /stories/{storyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow delete: if isOwner(resource.data.userId);
    }
  }
}
