
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is the owner of a document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the requesting user is the author of an existing document.
    function isAuthor() {
      return request.auth.uid == resource.data.authorId;
    }

    // This function checks if only the allowed interaction fields are being changed.
    // This allows users to like, comment, vote, etc., without being able to edit the post content.
    function isInteractionUpdate() {
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
      let allowedInteractionKeys = ['likes', 'reposts', 'comments', 'poll'];
      return changedKeys.hasOnly(allowedInteractionKeys);
    }

    // --- Rules for Collections ---

    // Rules for the 'users' collection and its subcollections.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Users shouldn't delete their own accounts.

      // Notifications: Owner can read/manage. Any authenticated user can create one for them.
      match /notifications/{notificationId} {
        allow read, update, delete: if isOwner(userId);
        allow create: if request.auth != null;
      }
      
      // Bookmarks: Only the owner can manage their own bookmarks.
      match /bookmarks/{bookmarkId} {
        allow read, write: if isOwner(userId);
      }
      
      // Following: Only the owner can manage the list of people they follow.
      match /following/{followingId} {
        allow read, write: if isOwner(userId);
      }
      
      // Followers: Anyone can see who follows a user. Writes are controlled by app logic (follow/unfollow).
      match /followers/{followerId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null;
      }
    }

    // Rules for the 'posts' collection and its subcollections.
    match /posts/{postId} {
      allow read: if request.auth != null;
      // You can create a post if you are authenticated and you are the author.
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      // You can update a post if you are the author, or if you are just interacting with it.
      allow update: if request.auth != null && (isAuthor() || isInteractionUpdate());
      // You can delete a post only if you are the author.
      allow delete: if request.auth != null && isAuthor();

      // Comments: Similar rules to posts, but nested.
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if request.auth != null && resource.data.authorId == request.auth.uid;
      }
    }
    
    // Rules for the 'stories' collection.
    match /stories/{storyId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Rules for the 'topics' collection.
    match /topics/{topicId} {
        allow read: if request.auth != null;
        // Topics are created by a backend flow, so any authenticated user can trigger this.
        allow create: if request.auth != null;
        // Topics should not be updated or deleted from the client to maintain data integrity.
        allow update, delete: if false;
    }
  }
}
