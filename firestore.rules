rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isUser(userId);
      allow update: if isUser(userId);
      allow delete: if false; // Generally, don't allow users to delete their own accounts through client
    }
    
    // Rules for 'stories' collection
    match /stories/{storyId} {
      allow read: if isSignedIn();
      // Only allow creating a story if the userId in the document matches the authenticated user
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // Only allow updates/deletes by the user who created the story
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Rules for 'posts' collection
    match /posts/{postId} {
      allow read: if isSignedIn();

      // Users can create posts if the authorId matches their uid
      allow create: if isUser(request.resource.data.authorId);
      
      // Allow updates under two conditions:
      // 1. The user is the author of the post (for editing content)
      // 2. Any signed-in user is ONLY incrementing the comment count by 1 (for adding a comment)
      allow update: if (isUser(resource.data.authorId) && request.resource.data.authorId == resource.data.authorId)
                    || (isSignedIn() 
                        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['comments']) 
                        && request.resource.data.comments == resource.data.comments + 1);

      // Only the author can delete their post
      allow delete: if isUser(resource.data.authorId);

      // Rules for 'comments' subcollection
      match /comments/{commentId} {
        allow read: if isSignedIn();
        
        // Users can create comments if the authorId matches their uid
        allow create: if isUser(request.resource.data.authorId);
        
        // For now, don't allow comment edits/deletes from client
        allow update, delete: if false;
      }
    }
  }
}
