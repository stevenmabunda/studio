
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // --- Collections ---

    // USERS: Users can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow write: if isOwner(userId);
    }

    // POSTS:
    match /posts/{postId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated() && isOwner(request.resource.data.authorId);
      allow delete: if isUserAuthenticated() && isOwner(resource.data.authorId);

      // UPDATE: Allow an update if...
      // 1. The user is the author (allowing them to edit their post).
      // OR
      // 2. The user is authenticated and is NOT changing the core content (allowing interactions like likes/comments).
      allow update: if (isUserAuthenticated() && isOwner(resource.data.authorId)) ||
                      (isUserAuthenticated() &&
                         request.resource.data.content == resource.data.content &&
                         request.resource.data.authorId == resource.data.authorId);
    }
    
    // COMMENTS:
    match /posts/{postId}/comments/{commentId} {
      allow read: if isUserAuthenticated();
      // A user can create a comment. The associated post update (incrementing the counter)
      // is validated by the `update` rule for the post document itself.
      allow create: if isUserAuthenticated();
      allow update, delete: if isUserAuthenticated() && isOwner(resource.data.authorId);
    }

    // STORIES:
    match /stories/{storyId} {
        allow read: if isUserAuthenticated();
        allow create: if isUserAuthenticated() && isOwner(request.resource.data.userId);
        allow delete: if isUserAuthenticated() && isOwner(resource.data.userId);
    }

    // TOPICS:
    match /topics/{topicId} {
      allow read, create: if isUserAuthenticated();
    }
  }
}
