
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is logged in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check that only specific fields are being updated.
    function isUpdatingOnly(fields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isOwner(userId);
    }

    // Rules for the 'posts' collection
    match /posts/{postId} {
      allow read, create: if isSignedIn();
      
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);

      // Allow updates for specific cases: editing content, voting, and comment count increments.
      allow update: if isSignedIn() && (
        // Owner is editing their own post's content
        (isOwner(resource.data.authorId) && isUpdatingOnly(['content'])) ||
        // Any user is incrementing the comment count
        (request.resource.data.comments == resource.data.comments + 1 && isUpdatingOnly(['comments'])) ||
        // Any user is voting on a poll
        isUpdatingOnly(['poll'])
      );

      // Rules for the 'comments' subcollection within a post
      match /comments/{commentId} {
        allow read, create: if isSignedIn();
        // Comments are immutable and cannot be updated or deleted by users
        allow update, delete: if false; 
      }
    }

    // Rules for the 'stories' collection
    match /stories/{storyId} {
      allow read, create: if isSignedIn();
      allow update, delete: if isOwner(resource.data.userId);
    }
  }
}
