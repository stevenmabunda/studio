
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read any profile, but can only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'posts' collection
    match /posts/{postId} {
      // Any authenticated user can read any post.
      allow read: if request.auth != null;

      // An authenticated user can create a post if their UID matches the authorId in the new post.
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;

      // Rules for updating a post document.
      allow update: if request.auth != null && (
        // Case 1: The author is editing the post's content.
        // This is only allowed if the user is the author and ONLY the 'content' field is being changed.
        (resource.data.authorId == request.auth.uid &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['content'])) ||

        // Case 2: Any authenticated user is updating interaction counts (likes, reposts, comments, poll votes).
        // This is allowed if ONLY the interaction-related fields are being changed.
        (request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['likes', 'reposts', 'comments', 'poll']))
      );

      // Only the author of a post can delete it.
      allow delete: if request.auth != null && resource.data.authorId == request.auth.uid;

      // Rules for the 'comments' subcollection within a post
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow delete: if request.auth != null && resource.data.authorId == request.auth.uid;
      }
    }

    // Rules for stories
    match /stories/{storyId} {
      allow read, create: if request.auth != null;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Rules for topics
    match /topics/{topicId} {
        allow read, create: if request.auth != null;
    }
  }
}
