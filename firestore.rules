rules_version = '2';

service cloud.firestore {
  match /databases/bholo/documents {
    
    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isPostOwner(postId) {
        return get(/databases/$(database)/documents/posts/$(postId)).data.authorId == request.auth.uid;
    }

    // Users can read any profile, but only write to their own.
    match /users/{userId} {
      allow read;
      allow write: if isOwner(userId);
      
      // Anyone can see who follows a user.
      match /followers/{followerId} {
        allow read;
      }
      
      // A user can only see their own 'following' list.
      match /following/{followingId} {
        allow read: if isOwner(userId);
      }
      
      // Users can only manage their own bookmarks and notifications.
      match /bookmarks/{postId} {
        allow read, write: if isOwner(userId);
      }
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Transactions for following/unfollowing must happen through the backend functions.
    // Direct client writes to followers/following subcollections are denied.
    match /users/{userId}/{collection}/{docId} {
      allow write: if false; // Deny direct writes to subcollections like followers/following
    }

    match /posts/{postId} {
      // Any authenticated user can read any post.
      allow read: if request.auth != null;
      
      // Only the author can delete their post.
      allow delete: if isPostOwner(postId);
      
      // Users can create a post if they are logged in.
      allow create: if request.auth != null;

      // Complex update logic
      allow update: if request.auth != null && (
          // Rule 1: The owner can update the 'content' field.
          (isPostOwner(postId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['content'])) ||
          // Rule 2: Any authenticated user can update interaction fields.
          (request.resource.data.diff(resource.data).affectedKeys().hasAny(['likes', 'comments', 'reposts']) || 
           (request.resource.data.poll.choices.size() == resource.data.poll.choices.size() &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['poll.choices'])))
      );
      
      // Comments
      match /comments/{commentId} {
        allow read, create: if request.auth != null;
        // Logic to allow comment deletion/editing could go here if needed.
      }
    }
    
    match /topics/{topicId} {
      allow read, create: if request.auth != null;
    }
  }
}
